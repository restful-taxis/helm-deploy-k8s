apiVersion: apps/v1
kind: {{.Values.postgresql_manage_customer.deployment.kind}}
metadata:
  name: {{.Values.postgresql_manage_customer.deployment.name}}
  namespace: {{.Release.Namespace}}
spec:
  serviceName: {{.Values.postgresql_manage_customer.service.name}}
  replicas: {{.Values.postgresql_manage_customer.deployment.replicas}}
  selector:
    matchLabels:
      app: {{.Values.postgresql_manage_customer.deployment.name}}
  template:
    metadata:
      labels:
        app: {{.Values.postgresql_manage_customer.deployment.name}}
    spec:
      nodeSelector:
        kubernetes.io/hostname: {{.Values.postgresql_manage_customer.nodeName}}
      containers:
        - name: {{.Values.postgresql_manage_customer.deployment.name}}
          image: {{printf "%s:%s" .Values.postgresql_manage_customer.deployment.image .Values.postgresql_manage_customer.deployment.tag}}
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{.Values.postgresql_manage_customer.secretName}}
                  key: database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{.Values.postgresql_manage_customer.secretName}}
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Values.postgresql_manage_customer.secretName}}
                  key: password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data

            - mountPath: /dev/shm
              name: dshm

      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: {{.Values.postgresql_manage_customer.volume.pvcName}}

        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: {{.Values.postgresql_manage_customer.config.dshmSizeLimit}}
